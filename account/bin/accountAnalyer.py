#! /usr/bin/python
####################################################################
#
# description : the script is reading both CSV from Targo bank account
#               as well as files from PDF miner based on credit card 
#               output is a clean CSV file with unified layout
#               for display in browser
#
####################################################################
import re
from optparse import OptionParser
import datetime
import creditCardReader

# this is acctually the main body
parser = OptionParser()
parser.add_option("-f", "--file", dest="filename",
                  help="write report to FILE", metavar="FILE")
parser.add_option("-y", "--year", dest="year",
                  help="using year", metavar="FILE")
parser.add_option("-r", "--rollover", dest="rollover",
                  help="using a rollover", metavar="FILE")
parser.add_option("-g", "--giro", dest="giro",
                  action="store_true", default=False,
                  help="file which was generated by PDF miner")

(options, args)  = parser.parse_args()
file_name_input  = options.filename
year             = options.year
rollover         = options.rollover
file_name_output = 'targo_cleaner.txt'

print ("Handling file input  ", file_name_input)
f    = open(file_name_input, "r")
fout = open(file_name_output, "w")

# reading the entire file into buffer
data = f.readlines()
transactionData = addEntries(data)
formatOutput(transactionData)

def isDate(TestString):
    matchObj = re.search(r'\d+\.\d+\.\d+',TestString)
    if matchObj:
        print "Info: Match for date ",matchObj.group()
        return True
     return False

def addEntries(data) :   
    newEntry       = []
    for line in data:
        words = line.split(" ")
        if isDate(words[0]) and isDate(words[1]) :
            print ("found account statement ", line)
            newEntry.append(handleCreditCardStatement(line,accountName,year,rollover))
            continue
        print ("Warning: no new entry")
    return newEntry

def formatOutput(DataSet):
    print ("Debug: finally sorting and printing")
    newData = sortForDate(DataSet)
    for data in newData:
        print ("Debug: sorted output:", data)
        fout.write(','.join(data))
        fout.write('\n')
    
